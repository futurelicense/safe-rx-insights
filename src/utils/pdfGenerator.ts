
import { PatientRecord } from '@/types/patient';

export const generatePDFReport = async (patients: PatientRecord[]): Promise<void> => {
  // This is a simplified PDF generation - in production, you'd use a library like jsPDF
  const reportData = {
    timestamp: new Date().toISOString(),
    totalPatients: patients.length,
    highRisk: patients.filter(p => p.Risk_Level === 'High').length,
    mediumRisk: patients.filter(p => p.Risk_Level === 'Medium').length,
    lowRisk: patients.filter(p => p.Risk_Level === 'Low').length,
    flaggedPatients: patients.filter(p => p.Flagged_Warnings.length > 0).length,
  };

  // Create a simple HTML report that can be printed or saved as PDF
  const reportHTML = `
    <!DOCTYPE html>
    <html>
    <head>
      <title>ORM-PAD Risk Analysis Report</title>
      <style>
        body { font-family: Arial, sans-serif; margin: 20px; }
        .header { text-align: center; margin-bottom: 30px; }
        .summary { background: #f5f5f5; padding: 20px; margin-bottom: 30px; }
        .patient-table { width: 100%; border-collapse: collapse; }
        .patient-table th, .patient-table td { border: 1px solid #ddd; padding: 8px; text-align: left; }
        .patient-table th { background-color: #f2f2f2; }
        .risk-high { background-color: #fee; }
        .risk-medium { background-color: #fff3e0; }
        .risk-low { background-color: #f0f8f0; }
        .footer { margin-top: 30px; text-align: center; font-size: 12px; color: #666; }
      </style>
    </head>
    <body>
      <div class="header">
        <h1>ORM-PAD Risk Analysis Report</h1>
        <p>Generated: ${new Date().toLocaleString()}</p>
      </div>
      
      <div class="summary">
        <h2>Summary Statistics</h2>
        <div style="display: flex; gap: 20px;">
          <div>
            <strong>Total Patients:</strong> ${reportData.totalPatients}<br>
            <strong>High Risk:</strong> ${reportData.highRisk}<br>
            <strong>Medium Risk:</strong> ${reportData.mediumRisk}<br>
            <strong>Low Risk:</strong> ${reportData.lowRisk}
          </div>
          <div>
            <strong>Flagged for Review:</strong> ${reportData.flaggedPatients}<br>
            <strong>High Risk %:</strong> ${((reportData.highRisk / reportData.totalPatients) * 100).toFixed(1)}%
          </div>
        </div>
      </div>

      <h2>Patient Details</h2>
      <table class="patient-table">
        <thead>
          <tr>
            <th>Patient ID</th>
            <th>Name</th>
            <th>Drug</th>
            <th>Risk Level</th>
            <th>Risk Score</th>
            <th>Warnings</th>
          </tr>
        </thead>
        <tbody>
          ${patients.map(patient => `
            <tr class="risk-${patient.Risk_Level.toLowerCase()}">
              <td>${patient.Patient_ID}</td>
              <td>${patient.Full_Name}</td>
              <td>${patient.Drug_Name}</td>
              <td>${patient.Risk_Level}</td>
              <td>${patient.Risk_Score.toFixed(2)}</td>
              <td>${patient.Flagged_Warnings.join(', ')}</td>
            </tr>
          `).join('')}
        </tbody>
      </table>

      <div class="footer">
        <p>This report was generated by ORM-PAD (Opioid Risk Monitoring & Patient Adherence Dashboard)</p>
        <p>All data processed securely in your browser - no external storage</p>
      </div>
    </body>
    </html>
  `;

  // Open in new window for printing/saving
  const printWindow = window.open('', '_blank');
  if (printWindow) {
    printWindow.document.write(reportHTML);
    printWindow.document.close();
    printWindow.print();
  }
};
